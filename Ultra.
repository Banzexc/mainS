local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Dvs Ultra",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Please Be Patien",
   LoadingSubtitle = "by Reddev",
   ShowText = "Dvs ultra", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Hvs Ultra"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Auto") -- Title, Image

local Button = Tab:CreateButton({
   Name = "Button Example",
   Callback = function()
   local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()

local FISHING_KEY = "e"
local SCAN_INTERVAL = 1
local FISH_COLOR = Color3.fromRGB(255, 200, 100)

local autoFishingEnabled = false
local fishingConnection = nil

function isFishOnScreen()
    for _, gui in pairs(Player.PlayerGui:GetDescendants()) do
        if gui:IsA("ImageLabel") or gui:IsA("TextLabel") then
            if gui.Name:lower():find("fish") or (gui.Text and gui.Text:lower():find("fish")) then
                return true
            end
        end
    end
    return false
end

function doFishing()
    virtualInput = game:GetService("VirtualInputManager")
    virtualInput:SendKeyEvent(true, FISHING_KEY, false, game)
    wait(0.1)
    virtualInput:SendKeyEvent(false, FISHING_KEY, false, game)
end

function startAutoFishing()
    if autoFishingEnabled then return end
    
    autoFishingEnabled = true
    
    fishingConnection = game:GetService("RunService").Heartbeat:Connect(function()
        if not autoFishingEnabled then
            fishingConnection:Disconnect()
            return
        end
        
        if isFishOnScreen() then
            doFishing()
            wait(SCAN_INTERVAL)
        end
    end)
end

function stopAutoFishing()
    autoFishingEnabled = false
    if fishingConnection then
        fishingConnection:Disconnect()
    end
end

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.F9 then
        if autoFishingEnabled then
            stopAutoFishing()
        else
            startAutoFishing()
        end
    end
end)
   end,
})
